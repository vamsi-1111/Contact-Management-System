{"ast":null,"code":"var _jsxFileName = \"/Users/vchitturi/Desktop/Contact Managment  System/client/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport ToastContext from \"./ToastContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    toast\n  } = useContext(ToastContext);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    checkUserLoggedIn();\n  }, []); // check if the user is logged in.\n\n  const checkUserLoggedIn = async () => {\n    try {\n      const res = await fetch(`http://localhost:8000/api/me`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const result = await res.json();\n\n      if (!result.error) {\n        if (location.pathname === \"/login\" || location.pathname === \"/register\") {\n          setTimeout(() => {\n            navigate(\"/\", {\n              replace: true\n            });\n          }, 500);\n        } else {\n          navigate(location.pathname ? location.pathname : \"/\");\n        }\n\n        setUser(result);\n      } else {\n        navigate(\"/login\", {\n          replace: true\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }; // login request.\n\n\n  const loginUser = async userData => {\n    try {\n      const res = await fetch(`http://localhost:8000/api/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ ...userData\n        })\n      });\n      const result = await res.json();\n\n      if (!result.error) {\n        localStorage.setItem(\"token\", result.token);\n        setUser(result.user);\n        toast.success(`Logged in ${result.user.name}`);\n        navigate(\"/\", {\n          replace: true\n        });\n      } else {\n        toast.error(result.error);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }; // register request.\n\n\n  const registerUser = async userData => {\n    try {\n      const res = await fetch(`http://localhost:8000/api/register`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ ...userData\n        })\n      });\n      const result = await res.json();\n\n      if (!result.error) {\n        toast.success(\"user registered successfully! login into your account!\");\n        navigate(\"/login\", {\n          replace: true\n        });\n      } else {\n        toast.error(result.error);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loginUser,\n      registerUser,\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"nWOkKNc/dLTKcaG9VL+yh87JdTc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/vchitturi/Desktop/Contact Managment  System/client/src/context/AuthContext.js"],"names":["createContext","useContext","useEffect","useState","useLocation","useNavigate","toast","ToastContainer","ToastContext","AuthContext","AuthContextProvider","children","navigate","location","user","setUser","error","setError","checkUserLoggedIn","res","fetch","method","headers","Authorization","localStorage","getItem","result","json","pathname","setTimeout","replace","err","console","log","loginUser","userData","body","JSON","stringify","setItem","token","success","name","registerUser"],"mappings":"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","sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport ToastContext from \"./ToastContext\";\n\nconst AuthContext = createContext();\n\nexport const AuthContextProvider = ({ children }) => {\n  const { toast } = useContext(ToastContext);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    checkUserLoggedIn();\n  }, []);\n\n  // check if the user is logged in.\n  const checkUserLoggedIn = async () => {\n    try {\n      const res = await fetch(`http://localhost:8000/api/me`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      const result = await res.json();\n      if (!result.error) {\n        if (\n          location.pathname === \"/login\" ||\n          location.pathname === \"/register\"\n        ) {\n          setTimeout(() => {\n            navigate(\"/\", { replace: true });\n          }, 500);\n        } else {\n          navigate(location.pathname ? location.pathname : \"/\");\n        }\n        setUser(result);\n      } else {\n        navigate(\"/login\", { replace: true });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // login request.\n  const loginUser = async (userData) => {\n    try {\n      const res = await fetch(`http://localhost:8000/api/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ ...userData }),\n      });\n      const result = await res.json();\n      if (!result.error) {\n        localStorage.setItem(\"token\", result.token);\n        setUser(result.user);\n        toast.success(`Logged in ${result.user.name}`);\n\n        navigate(\"/\", { replace: true });\n      } else {\n        toast.error(result.error);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // register request.\n  const registerUser = async (userData) => {\n    try {\n      const res = await fetch(`http://localhost:8000/api/register`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ ...userData }),\n      });\n      const result = await res.json();\n\n      if (!result.error) {\n        toast.success(\"user registered successfully! login into your account!\");\n        navigate(\"/login\", { replace: true });\n      } else {\n        toast.error(result.error);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ loginUser, registerUser, user, setUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}